import streamlit_folium
import streamlit as st
import numpy as np
import pandas as pd
import random
import folium
from folium.plugins import MarkerCluster
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.models import load_model
from streamlit_folium import st_folium
from sklearn.preprocessing import MinMaxScaler

st.set_page_config(
    page_title="streamlit-folium documentation",
    page_icon=":world_map:Ô∏è",
    layout="wide",
)

# Carregar dados e modelo
# Ajuste o caminho do seu arquivo CSV
df = pd.read_csv('dados_simulados_onibus_30dias.csv')
# Arquivo com latitudes e longitudes das paradas
df_lat = pd.read_csv('pontos_lat_long.csv')

df_demanda = pd.read_csv('dados_demanda.csv')
# Carregando seu modelo
# model = load_model("modelo_preditivo.h5")

# Layout do Streamlit
st.markdown("<h1 style='text-align: center; color: white;'>Sistema Preditivo de Tr√°fego e Demanda de Transporte</h1>",
            unsafe_allow_html=True)

# Dividindo a p√°gina em tr√™s colunas
col1, col2, col3, col4 = st.columns([1, 1, 1, 1])

# **Coluna 1 - Esquerda** (Informa√ß√µes gerais sobre o sistema)
with col1:
    df = pd.read_csv('dados_simulados_onibus_30dias.csv')

    # Converter vari√°veis categ√≥ricas em num√©ricas
    df["Clima"] = df["Clima"].map({"Sol": 0, "Nublado": 1, "Chuva": 2})
    df["Evento Local"] = df["Evento Local"].map({"Sim": 1, "N√£o": 0})

    # Exibir t√≠tulo
    st.markdown("<h2 style='text-align: center; color: white;'>Informa√ß√µes Gerais</h2>",
                unsafe_allow_html=True)
    # Obter as linhas dispon√≠veis
    linhas = df['Linha'].unique()

    # Criar uma linha horizontal para exibir as linhas de √¥nibus
    st.markdown("<h3 style='text-align: center;'>Linhas de √înibus Dispon√≠veis</h3>",
                unsafe_allow_html=True)
    cols = st.columns(len(linhas))  # Criar uma coluna para cada linha

    # Preencher cada coluna com o nome de uma linha
    for col, linha in zip(cols, linhas):
        # √çcone de √¥nibus para decorar (opcional)
        col.write(f"üöå Linha {linha}")

    # Obter as linhas dispon√≠veis
    linhas = df['Linha'].unique()

    # Adicionar dados fict√≠cios para o n√∫mero de √¥nibus em rota e a parada atual
    df['Onibus_ID'] = df.groupby(
        'Linha').cumcount() + 1  # ID fict√≠cio de √¥nibus
    df['Parada Atual'] = df['Parada'] % 10  # Paradas atuais simuladas

    # Criar uma lista suspensa para selecionar uma linha
    st.markdown("<h3 style='text-align: center;'>Selecione uma Linha de √înibus</h3>",
                unsafe_allow_html=True)

    linha_selecionada = st.selectbox(
        "Escolha uma linha para visualizar os dados:",
        options=df['Linha'].unique()
    )

    if linha_selecionada:
        # Filtrar dados da linha selecionada
        df_linha = df[df['Linha'] == linha_selecionada]

        # C√°lculos gerais
        # N√∫mero de √¥nibus em rota
        num_onibus = random.randint(1, 4)
        dados_onibus = []
        for i in range(num_onibus):
            dados_onibus.append({
                'Onibus_ID': i + 1,
                'Parada Atual': random.randint(1, df_linha['Parada'].nunique()),
                'Demanda (%)': round(random.uniform(10, 120), 2)
            })
        num_paradas = df_linha['Parada'].nunique()  # N√∫mero total de paradas
        lotacao_media = sum(onibus['Demanda (%)']
                            # Lota√ß√£o m√©dia
                            for onibus in dados_onibus) / len(dados_onibus)

        # Exibir informa√ß√µes gerais
        st.markdown("<h3 style='text-align: center;'>Informa√ß√µes da Linha</h3>",
                    unsafe_allow_html=True)
        st.write(f"#### N√∫mero de √înibus em Rota: {num_onibus}")
        st.write(f"#### N√∫mero de Paradas: {num_paradas}")
        st.write(f"#### Lota√ß√£o M√©dia: {lotacao_media:.2f}%")
        st.write("")  # Adiciona uma linha em branco
        st.write("")  # Adiciona mais espa√ßo
        # Informa√ß√µes detalhadas de cada √¥nibus
        st.markdown("<h3 style='text-align: center;'>Detalhes dos √înibus em Rota</h3>",
                    unsafe_allow_html=True)
        for onibus in dados_onibus:
            st.write(
                f" ##### ID: {onibus['Onibus_ID']} | Parada Atual: {onibus['Parada Atual']} | Demanda (%): {onibus['Demanda (%)']}")


# **Coluna 2 - Centro** (Gr√°ficos)
with col2:
    st.markdown("<h2 style='text-align: center; color: white;'>Gr√°ficos</h2>",
                unsafe_allow_html=True)

    dados_linhas = {
        "Linha": ["1500", "3200", "5120", "2300", "1519", "5100"],
        "Demanda M√©dia (%)": [75, 23, 85, 112, 50, 80]
    }

    df_manual = pd.DataFrame(dados_linhas)

    # Gr√°fico de barras - Linhas com maior lota√ß√£o
    st.markdown("<h3 style='text-align: center; color: white;'>Lota√ß√£o por linhas</h3>",
                unsafe_allow_html=True)
    plt.figure(figsize=(10, 6))
    sns.barplot(x=df_manual["Linha"],
                y=df_manual["Demanda M√©dia (%)"], palette='viridis')
    plt.title('Linhas com Maior Lota√ß√£o')
    plt.xlabel('Linha')
    plt.ylabel('Demanda M√©dia (%)')
    st.pyplot(plt)

    # Gr√°fico de linhas - Demanda por Parada
    st.markdown("<h3 style='text-align: center; color: white;'>Demanda por parada</h3>",
                unsafe_allow_html=True)
    demanda_por_parada = df.groupby(['Linha', 'Parada'])[
        'Demanda (%)'].mean().reset_index()
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=demanda_por_parada, x='Parada',
                 y='Demanda (%)', hue='Linha', marker='o')
    plt.title('Demanda por Parada para Cada Linha')
    plt.xlabel('N√∫mero da Parada')
    plt.ylabel('Demanda (%)')
    plt.legend(title='Linhas')
    st.pyplot(plt)

# **Coluna 3 - Direita** (Mapa)
with col3:
    st.markdown("<h2 style='text-align: center; color: white;'>Mapa das Paradas</h2>",
                unsafe_allow_html=True)
    # st.header("Mapa das Paradas de √înibus")

    import requests

    # Sua chave da API
    API_KEY = "AIzaSyCxcmyn24T1B_YCjhGUOfFqvoK2F1aVlOI"

    # Endere√ßo da API Directions
    # url = "https://maps.googleapis.com/maps/api/directions/json"

    # # Par√¢metros da solicita√ß√£o
    # params = {
    #     "origin": "Endere√ßo de origem ou coordenadas",  # Ponto inicial
    #     "destination": "Endere√ßo de destino ou coordenadas",  # Ponto final
    #     "departure_time": "now",  # Tempo atual para tr√¢nsito em tempo real
    #     "traffic_model": "best_guess",  # Modelo de tr√¢nsito
    #     "key": API_KEY
    # }

    # # Fazer a solicita√ß√£o √† API
    # response = requests.get(url, params=params)
    # data = response.json()

    # # Exibir informa√ß√µes √∫teis
    # if response.status_code == 200:
    #     print("Dura√ß√£o com tr√¢nsito:", data['routes']
    #           [0]['legs'][0]['duration_in_traffic']['text'])
    # else:
    #     print("Erro:", data['error_message'])

    url_places = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"

    # Coordenadas centrais e tipo de lugar
    params_places = {
        "location": "-7.115, -34.861",  # Exemplo: Jo√£o Pessoa
        "radius": "20000",  # Raio em metros
        "type": "bus_stop, bus_station",  # Tipo de lugar
        "key": API_KEY
    }

    response_places = requests.get(url_places, params=params_places)
    data_places = response_places.json()

    # st.write(data_places)
    st.markdown("<h3 style='text-align: center;'>Paradas de √înibus Pr√≥ximas</h3>",
                unsafe_allow_html=True)
    # Exibir paradas de √¥nibus pr√≥ximas
    if response_places.status_code == 200:
        for place in data_places['results']:
            print("Nome:", place['name'])
            print("Endere√ßo:", place.get('vicinity', 'Desconhecido'))
            print("Coordenadas:", place['geometry']['location'])
    else:
        print("Erro:", data_places['error_message'])

    mapa = folium.Map(location=[-7.115, -34.861], zoom_start=14)

# Adicionar marcadores para as paradas
    for place in data_places['results']:
        lat = place['geometry']['location']['lat']
        lng = place['geometry']['location']['lng']
        name = place['name']
        folium.Marker(location=[lat, lng], popup=name, icon=folium.Icon(
            icon="bus", prefix="fa", color="blue")).add_to(mapa)

    # Exibir mapa no Streamlit
    st_folium(mapa, width=800, height=600)

    # mapa = folium.Map(location=[-7.115, -34.861], zoom_start=12)
    # marker_cluster = MarkerCluster().add_to(mapa)

    # # Adicionar marcadores para as paradas no mapa
    # for index, row in df_lat.iterrows():
    #     folium.Marker(
    #         location=[row['Latitude'], row['Longitude']],
    #         icon=folium.Icon(color='blue')
    #     ).add_to(marker_cluster)

    # # Exibir o mapa
    # st_folium(mapa, width=725)

with col4:
    st.markdown("<h2 style='text-align: center; color: white;'>Previs√£o de ocupa√ß√£o nas pr√≥ximas viagens</h2>",
                unsafe_allow_html=True)

    # Fun√ß√£o para calcular a ocupa√ß√£o com base nas condi√ß√µes

    def simular_ocupacao(parada, total_paradas, linha, clima, evento_local, previsao_transito):
        # Normalizar a parada para estar entre 0 e 1
        x = parada / total_paradas

        # Gerar a demanda base com varia√ß√£o para cada linha
        if linha == '1500':  # Linha 1500: alta no in√≠cio, baixa no fim
            demanda = 80 * np.sin(np.pi * x)  # Aumento e diminui√ß√£o suave
        elif linha == '5100':  # Linha 5100: m√©dia no in√≠cio, alta no meio, baixa no fim
            demanda = 50 + 30 * np.cos(np.pi * x)  # Pico no meio
        elif linha == '5120':  # Linha 5120: m√©dia no in√≠cio, baixa no meio, alta no fim
            demanda = 50 + 30 * np.sin(np.pi * x)  # Pico no fim
        elif linha == '1519':  # Linha 1519: baixa no in√≠cio, alta no meio, baixa no fim
            demanda = 20 + 50 * np.cos(np.pi * x)  # Pico no meio
        elif linha == '2300':  # Linha 2300: est√°vel com leve aumento no in√≠cio
            demanda = 60 + 20 * np.sin(np.pi * x / 2)  # Leve pico no in√≠cio
        elif linha == '3200':  # Linha 3200: est√°vel com leve aumento no fim
            demanda = 60 + 20 * np.sin(np.pi * x)  # Leve pico no fim
        else:
            demanda = 50  # Caso padr√£o, demanda constante

        # Modificar a demanda com base nas condi√ß√µes
        if clima == 'Sol':
            # Menor demanda em dias ensolarados, varia√ß√£o maior
            demanda -= np.random.uniform(15, 25)
        elif clima == 'Chuva':
            # Maior demanda em dias chuvosos, varia√ß√£o maior
            demanda += np.random.uniform(20, 40)
        elif clima == 'Nublado':
            # Demanda m√©dia em dias nublados, varia√ß√£o maior
            demanda += np.random.uniform(10, 30)

        # Aumentar ou diminuir a demanda em eventos locais
        if evento_local == 'Sim':
            # 85% de chance de aumentar a demanda
            evento_efeito = np.random.choice([1, -1], p=[0.85, 0.15])
            # Aumento ou diminui√ß√£o de demanda
            demanda += np.random.uniform(30, 60) * evento_efeito

        # Ajustar a demanda com base na previs√£o de tr√¢nsito
        if previsao_transito == 'Pesado':
            # Aumento da demanda em tr√¢nsito pesado
            demanda += np.random.uniform(15, 35)
        elif previsao_transito == 'Leve':
            # Redu√ß√£o da demanda em tr√¢nsito leve
            demanda -= np.random.uniform(5, 15)

        # Garantir que a demanda nunca seja negativa e que n√£o ultrapasse 120%
        demanda = np.clip(demanda, 10, 120)

        return demanda

    # Interface do Streamlit
    st.markdown("<h3 style='text-align: center;'>Simula√ß√£o de Ocupa√ß√£o por Linha</h3>",
                unsafe_allow_html=True)

    # Sele√ß√£o da linha de √¥nibus
    linha_selecionada = st.selectbox(
        'Escolha uma Linha de √înibus:', df['Linha'].unique())

    # Condi√ß√µes de simula√ß√£o
    clima_selecionado = st.selectbox(
        'Escolha o clima:', ['Sol', 'Chuva', 'Nublado'])
    evento_selecionado = st.selectbox('H√° eventos locais?', ['Sim', 'N√£o'])
    transito_selecionado = st.selectbox(
        'Qual a previs√£o de tr√¢nsito?', ['Leve', 'Pesado'])

    # Bot√£o para gerar a simula√ß√£o
    if st.button('Gerar Simula√ß√£o'):
        if linha_selecionada and clima_selecionado and evento_selecionado and transito_selecionado:
            # Gerar a ocupa√ß√£o simulada conforme as condi√ß√µes selecionadas
            total_paradas = df[df['Linha'] ==
                               linha_selecionada]['Parada'].nunique()
            ocupacao_simulada = []

            # Gerar demanda simulada para cada parada
            for parada in range(1, total_paradas + 1):
                demanda = simular_ocupacao(parada, total_paradas, linha_selecionada,
                                           clima_selecionado, evento_selecionado, transito_selecionado)
                ocupacao_simulada.append(demanda)

            # Calcular a m√©dia da ocupa√ß√£o
            media_ocupacao = np.mean(ocupacao_simulada)

            # Mostrar os resultados da simula√ß√£o
            st.write(f"Simula√ß√£o de Ocupa√ß√£o para a Linha {
                linha_selecionada} com as condi√ß√µes selecionadas:")

            # Exibir a m√©dia de ocupa√ß√£o
            st.write(f"#### A m√©dia de ocupa√ß√£o para a linha {
                linha_selecionada} √©: {round(media_ocupacao, 2)}%")
            # Exibir gr√°fico ou tabela com os resultados
            result_df = pd.DataFrame({
                'Parada': range(1, len(ocupacao_simulada) + 1),
                'Ocupa√ß√£o Simulada (%)': ocupacao_simulada
            })
            # st.write(result_df)

            # Exibir gr√°fico
            st.line_chart(result_df.set_index('Parada'))
        else:
            st.warning(
                'Por favor, selecione todos os par√¢metros para a simula√ß√£o.')
